name: Backend CI/CD

on:
  push:
    branches: [main, master, development]
  pull_request:
    branches: [main, master, development]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install Dependencies
        run: pnpm install || pnpm install --no-frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate
      
      - name: Lint Check
        run: pnpm lint || echo "Linting issues found"
        
      - name: Run Tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
          NODE_ENV: development
          QUEUE_PREFIX: rental_motor_test
          PORT: 3030
          API_PREFIX: /api
          RATE_LIMIT_WINDOW_MS: 60000
          RATE_LIMIT_MAX: 100
          COMPRESSION_LEVEL: 6
          BAILEYS_SESSION_PATH: ./storage/whatsapp-sessions
          ADMIN_WHATSAPP: ${{ secrets.ADMIN_WHATSAPP || '+6285232152313' }}
          WHATSAPP_SESSION_PATH: ./storage/whatsapp-session
          WHATSAPP_SEND_DEBUG: false
          WHATSAPP_RECONNECT_INTERVAL: 60000
          WHATSAPP_MAX_RECONNECT_ATTEMPTS: 10
          LOG_LEVEL: debug
          LOG_FORMAT: text
          CORS_ORIGIN: "*"
          ENABLE_HTTPS: false
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          DENDA_PER_JAM: 15000
          WHATSAPP_API_URL: ${{ secrets.WHATSAPP_API_URL }}
          WHATSAPP_SESSION: ${{ secrets.WHATSAPP_SESSION || 'wa-rosanti' }}
          WHATSAPP_SECRET_KEY: ${{ secrets.WHATSAPP_SECRET_KEY }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          
      - name: Build
        run: pnpm build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r dist deployment/
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          cp ecosystem.config.js deployment/
          cp -r prisma deployment/
          cp .env.example deployment/
          cp -r storage deployment/ || true
          cp -r public deployment/ || true
          tar -czf deployment.tar.gz deployment
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: deployment.tar.gz
          retention-days: 1
          
  deploy:
    needs: build-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build

      - name: Deploy to production
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deployment.tar.gz"
          target: "/tmp"
          timeout: 120s
          debug: true

      - name: Setup deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            rm -rf /var/www/rosantibike/backend-deploy-temp || true
            mkdir -p /var/www/rosantibike/backend-deploy-temp
            tar -xzf /tmp/deployment.tar.gz -C /var/www/rosantibike/backend-deploy-temp
            cd /var/www/rosantibike/backend-deploy-temp/deployment
            pnpm install --prod || pnpm install --prod --no-frozen-lockfile
            
            # Copy .env if exists otherwise use .env.example
            if [ -f "/var/www/rosantibike/backend/.env" ]; then
              cp /var/www/rosantibike/backend/.env .
            else
              cp .env.example .env
              # Sesuaikan variabel lingkungan yang diperlukan
              sed -i "s|DATABASE_URL=.*|DATABASE_URL=\"${{ secrets.DATABASE_URL }}\"|g" .env
              sed -i "s|JWT_SECRET=.*|JWT_SECRET=\"${{ secrets.JWT_SECRET }}\"|g" .env
              sed -i "s|REDIS_HOST=.*|REDIS_HOST=\"${{ secrets.REDIS_HOST }}\"|g" .env
              sed -i "s|REDIS_PORT=.*|REDIS_PORT=\"${{ secrets.REDIS_PORT }}\"|g" .env
              sed -i "s|NODE_ENV=.*|NODE_ENV=\"production\"|g" .env
              sed -i "s|CLOUDINARY_CLOUD_NAME=.*|CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}|g" .env
              sed -i "s|CLOUDINARY_API_KEY=.*|CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}|g" .env
              sed -i "s|CLOUDINARY_API_SECRET=.*|CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}|g" .env
              sed -i "s|WHATSAPP_API_URL=.*|WHATSAPP_API_URL=${{ secrets.WHATSAPP_API_URL }}|g" .env
              sed -i "s|WHATSAPP_SESSION=.*|WHATSAPP_SESSION=${{ secrets.WHATSAPP_SESSION }}|g" .env
              sed -i "s|WHATSAPP_SECRET_KEY=.*|WHATSAPP_SECRET_KEY=${{ secrets.WHATSAPP_SECRET_KEY }}|g" .env
              sed -i "s|WEBHOOK_URL=.*|WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}|g" .env
            fi
            
            # Run migrations
            pnpm prisma migrate deploy
            
            # Backup current version and swap with new version
            if [ -d "/var/www/rosantibike/backend" ]; then
              mv /var/www/rosantibike/backend /var/www/rosantibike/backups/backend-backup-$(date +%Y%m%d%H%M%S)
            fi
            
            mkdir -p /var/www/rosantibike/backend
            cp -r ./* /var/www/rosantibike/backend/
            
            # Restart atau buat proses PM2 jika belum ada
            cd /var/www/rosantibike/backend
            if pm2 list | grep -q "rental-backend"; then
              pm2 restart rental-backend --update-env
            else
              pm2 start ecosystem.config.js
            fi 